        -:    0:Source:Password.c
        -:    0:Graph:menu.gcno
        -:    0:Data:menu.gcda
        -:    0:Runs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include<string.h>
        -:    4:#include<termios.h>
        -:    5:#include<ctype.h>
        -:    6:#include "/home/cguser2/project_group5/cut/Code/Header/Header2.h"
        -:    7:#define MAXPW 32
function password called 10 returned 100% blocks executed 55%
       10:    8:ssize_t password(char **pw,size_t sz,int mask,FILE *fp)
        -:    9:
        -:   10:{     
      10*:   11:	if(!pw || !sz||!fp)return -1;   // validate input
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 10 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 10
        -:   12:#ifdef MAXPW
      10*:   13:	if(sz> MAXPW) sz=MAXPW;
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:   14:#endif
        -:   15:
       10:   16:	if(*pw==NULL)                // reallocate if no address 
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:   17:	{
        -:   18:
    #####:   19:		void *tmp = realloc(*pw,sz * sizeof **pw);
    #####:   20:		if(!tmp)
branch  0 never executed
branch  1 never executed
    #####:   21:			return -1;
    #####:   22:		memset (tmp,0,sz);  // initialize memory to 0
    #####:   23:		*pw = (char*)tmp;
        -:   24:	}
       10:   25:	size_t idx = 0;         // index number of chars in read
       10:   26:	int c = 0;
        -:   27:	struct termios old_kbd_mode; // orig keyboard settings
        -:   28:	struct termios new_kbd_mode;
       10:   29:	if(tcgetattr (0,&old_kbd_mode)) // save orignal settings
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
        -:   30:	{
    #####:   31:		fprintf(stderr, "%s() error: tcgetattr failed.\n",__func__);
call    0 never executed
    #####:   32:		return -1;
        -:   33:	}   // copy old to new
       10:   34:	memcpy(&new_kbd_mode, &old_kbd_mode,sizeof(struct termios));
       10:   35:	new_kbd_mode.c_lflag &= ~(ICANON | ECHO); //new kbd flags
       10:   36:	new_kbd_mode.c_cc[VTIME] = 0;
       10:   37:	new_kbd_mode.c_cc[VMIN] = 1;
       10:   38:	if(tcsetattr (0, TCSANOW, &new_kbd_mode)){
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    #####:   39:		fprintf(stderr, "%s() error: tcsetattr failed.\n",__func__);
call    0 never executed
    #####:   40:		return -1;
        -:   41:	}
        -:   42:	// read chars from fp , mask if valid char specified
      43*:   43:	while(((c=fgetc(fp)) != '\n' && c != EOF && idx <sz - 1)||(idx ==sz - 1 && c==127))
call    0 returned 43
branch  1 taken 33 (fallthrough)
branch  2 taken 10
branch  3 taken 33 (fallthrough)
branch  4 taken 0
branch  5 taken 33
branch  6 taken 0 (fallthrough)
branch  7 taken 0 (fallthrough)
branch  8 taken 10
branch  9 never executed
branch 10 never executed
        -:   44:	{
       33:   45:		if(c != 127){
branch  0 taken 33 (fallthrough)
branch  1 taken 0
       33:   46:			if(31 < mask && mask <127)//valid ascii char
branch  0 taken 33 (fallthrough)
branch  1 taken 0
branch  2 taken 33 (fallthrough)
branch  3 taken 0
       33:   47:				fputc(mask,stdout);
call    0 returned 33
       33:   48:			(*pw)[idx++] = c;
        -:   49:		}
    #####:   50:		else if(idx > 0)  //handle backspace (del)
branch  0 never executed
branch  1 never executed
        -:   51:		{
    #####:   52:			if (31 < mask && mask < 127){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   53:				fputc(0x8,stdout);
call    0 never executed
    #####:   54:				fputc(' ',stdout);
call    0 never executed
    #####:   55:				fputc(0x8,stdout);
call    0 never executed
        -:   56:			}
    #####:   57:			(*pw)[--idx] = 0;
        -:   58:		}
        -:   59:	}
       10:   60:	(*pw)[idx] = 0; // null-terminate
        -:   61:	// reset original keyboard
       10:   62:	if(tcsetattr(0,TCSANOW,&old_kbd_mode)){
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    #####:   63:		fprintf(stderr,"%s() error: tcsetattr failed.\n",__func__);
call    0 never executed
    #####:   64:		return 1;
        -:   65:	}
      10*:   66:	if(idx == sz-1 && c!='\n')  // warn if pw truncate
branch  0 taken 0 (fallthrough)
branch  1 taken 10
branch  2 never executed
branch  3 never executed
    #####:   67:		fprintf(stderr,"(%s() warning: truncated at %zu chars.)\n",__func__,sz -1);
call    0 never executed
       10:   68:	return idx;  // number of chars in password
        -:   69:}
function checkpassword called 2 returned 100% blocks executed 78%
        2:   70:int checkpassword()
        -:   71:{
        2:   72:	char pw[MAXPW]={0};
        2:   73:	char *p=pw;
        -:   74:
        2:   75:	FILE *fp=stdin;
        2:   76:	ssize_t nchr=0;
        2:   77:	nchr=password(&p,MAXPW,'*',fp);
call    0 returned 2
        2:   78:	printf("\n Enter passowrd:");
call    0 returned 2
        2:   79:	nchr=password(&p,MAXPW,'*',fp);
call    0 returned 2
       2*:   80:	if(strcmp(p,"abc@123")==0 || strcmp(p,"xyz@345")==0)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 never executed
branch  3 never executed
        -:   81:	{
        2:   82:		return 0;
        -:   83:	}
        -:   84:	else
        -:   85:	{
    #####:   86:		return 1;
        -:   87:	}
        -:   88:
        -:   89:
        -:   90:}
function getpassword called 3 returned 100% blocks executed 100%
        3:   91:char * getpassword()
        -:   92:{
        3:   93:	char pw[MAXPW]={0};
        3:   94:	pt=pw;
        -:   95:
        3:   96:	FILE *fp=stdin;
        3:   97:	ssize_t nchr=0;
        3:   98:	nchr=password(&pt,MAXPW,'*',fp);
call    0 returned 3
        3:   99:	printf("\n Enter passowrd:");
call    0 returned 3
        3:  100:	nchr=password(&pt,MAXPW,'*',fp);
call    0 returned 3
        3:  101:	return pt;
        -:  102:}
